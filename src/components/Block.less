@base: 45;
@size: unit(@base, px);
@colorTop: #FFF;
@colorRight: #DDD;
@colorLeft: #BBB;
@colorBottom: #999;
@resourcePath:'../../resources/';

@grid: @size * 10;

.map {
  position: absolute;
  left: 50%;
  transform-style: preserve-3d;
  transition: all 300ms linear;
  transform-origin: center;
  top: 50%;
  transform: translate(-50%, -50%) rotateX(75deg) rotateZ(45deg);
  width: @grid;
  height: @grid;
}

.cube,
.cube:after,
.cube:before {
  content: '';
  height: @size;
  position: absolute;
  transition: all 300ms linear;
  width: @size;
}
.cube {
  // background-color: @colorTop;
  transform-style: preserve-3d;
}
.cube:after {
  // background-color: @colorLeft;
  transform: rotateX(-90deg) translateY(@size);
  transform-origin: 100% 100%;
}
.cube:before {
  // background-color: @colorRight;
  transform: rotateY(90deg) translateX(@size);
  transform-origin: 100% 0;
}

.back,
.back:after,
.back:before {
  content: '';
  height: @size;
  position: absolute;
  width: @size;
}
.back {
  // background-color: @colorBottom;
  transform-style: preserve-3d;
  transform: rotateX(-180deg) rotateZ(90deg) translateZ(@size);
}
.back:after {
  // background-color: darken(@colorRight, 10%);
  transform: rotateX(-90deg) translateY(@size);
  transform-origin: 100% 100%;
}
.back:before {
  // background-color: darken(@colorLeft, 10%);
  transform: rotateY(90deg) translateX(@size);
  transform-origin: 100% 0;
}

// how many objects
@iterations: 10 * 10;
@hue: 360 / @iterations;
.cube-loop (@i) when (@i > 0) {
  @color: @hue * @i;
  .cube:nth-child(@{i}) {
    background: hsl(@color, 100%, 50%);
    &:after {
      background: hsl(@color, 80%, 50%);
    }
    &:before {
      background: hsl(@color, 60%, 50%);
    }
    .back {
      background: hsl(@color, 100%, 40%);
      &:after {
        background: hsl(@color, 100%, 30%);
      }
      &:before {
        background: hsl(@color, 100%, 20%);
      }
    }
  }
  .cube-loop (@i - 1)
}

.cube-loop (@iterations);

:export {
  size: @base;
}
