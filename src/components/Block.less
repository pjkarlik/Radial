@base: 45;
@size: unit(@base, px);
@colorTop: #FFF;
@colorRight: #DDD;
@colorLeft: #BBB;
@colorBottom: #999;
@resourcePath:'../../resources';

@grid: @size * 10;

.map {
  position: absolute;
  left: 50%;
  transform-style: preserve-3d;
  transform-origin: center;
  top: 50%;
  transform: translate(-50%, -50%) rotateX(35deg) rotateZ(-5deg);
  width: @grid;
  height: @grid;
}

.cube,
.cube:after,
.cube:before {
  content: '';
  height: @size;
  position: absolute;
  width: @size;
}

.cube {
  transform-style: preserve-3d;
  background: url('@{resourcePath}/images/blueprofile.jpg') no-repeat;
  background-size: @grid @grid;
}
.cube:after {
  transform: rotateX(-90deg) translateY(@size);
  transform-origin: 100% 100%;
}
.cube:before {
  transform: rotateY(90deg) translateX(@size);
  transform-origin: 100% 0;
}

.back,
.back:after,
.back:before {
  content: '';
  height: @size;
  position: absolute;
  width: @size;
}
.back {
  transform-style: preserve-3d;
  transform: rotateX(-180deg) rotateZ(90deg) translateZ(@size);
}
.back:after {
  transform: rotateX(-90deg) translateY(@size);
  transform-origin: 100% 100%;
}
.back:before {
  transform: rotateY(90deg) translateX(@size);
  transform-origin: 100% 0;
}

// how many objects
@picSize: @base;
@iterations: 10 * 10;
@hue: 360 / @iterations;
.cube-loop (@i) when (@i > 0) {

  @color: @hue * @i;
  @picStop: unit(((@i - 1) / 100) * (8.5 * @base), px);
  @picRow: unit(mod(@i - 1, 10) * @base, px);

  .cube:nth-child(@{i}) {
    background-position: -@picRow -@picStop;
    &:after {
      background: #BBB; //hsl(@color, 80%, 50%);
    }
    &:before {
      background: #777 //hsl(@color, 60%, 50%);
    }
    .back {
      background: #222; //hsl(@color, 100%, 40%);
      &:after {
        background: #777; //hsl(@color, 100%, 30%);
      }
      &:before {
        background: #BBB; //hsl(@color, 100%, 20%);
      }
    }
  }
  .cube-loop (@i - 1)
}

.cube-loop (@iterations);

:export {
  size: @base;
}
